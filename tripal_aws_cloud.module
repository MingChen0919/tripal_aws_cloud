<?php

require drupal_get_path('module', 'tripal_aws_cloud').'/vendor/autoload.php';
require drupal_get_path('module', 'tripal_aws_cloud').'/includes/application_server.inc';
require drupal_get_path('module', 'tripal_aws_cloud').'/includes/database_server.inc';




/**
 * Implements hook_menu()
 */
function tripal_aws_cloud_menu(){
  $items['tripal_aws_cloud'] = array(
    'title' => '',
    'description' => t(''),
    'page callback' => 'tripal_aws_cloud_page',
    'access callback' => true,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * page callback: /tripal_aws_cloud page
 */
function tripal_aws_cloud_page(){
  $output = 'test';

  return $output;
}



## Create ec2 client
use Aws\Credentials\CredentialProvider;
use Aws\Ec2\Ec2Client;

$provider = CredentialProvider::ini();

$ec2 = new Aws\Ec2\Ec2Client([
          'version' => 'latest',
          'region' => 'us-east-1',
          'credentials' => $provider
          ]);


$describeVpcs = $ec2->describeVpcs([]);
$describeVpcsArr = $describeVpcs->toArray();
$numVpcs = count($describeVpcsArr['Vpcs']);
$VPCs = $describeVpcsArr['Vpcs'];

/*
## Step 1: creat VPC
$vpc = $ec2->createVpc([
          'CidrBlock' => '10.0.0.0/16',
          ]);
$VpcId = $vpc->toArray()['Vpc']['VpcId'];
#dpm($vpc->toArray());
#dpm($VpcId);

## Step 2: create two pubic subnets and one private subnet within VPC
$availZones = $ec2->describeAvailabilityZones([]);
#dpm($availZones->toArray());
$subnet_public_1 = $ec2->createSubnet([
          'AvailabilityZone' => $availZones->toArray()['AvailabilityZones'][0]['ZoneName'],
          'VpcId' => $VpcId,
          'CidrBlock' => '10.0.0.0/24',
        ]);
#dpm($subnet_public_1->toArray());
$SubnetId_public_1 = $subnet_public_1->toArray()['Subnet']['SubnetId'];


## Step 3: create a security group for web server and a security group for database server
$security_group_webServer = $ec2->createSecurityGroup([
          'Description' => 'Security group for web server',
          'GroupName' => 'webServer_security_group',
          'VpcId' => $VpcId,
          ]);
dpm($security_group_webServer->toArray());
$webServerGroupId = $security_group_webServer->toArray()['GroupId'];
$describeSecurityGroups = $ec2->describeSecurityGroups([
            'GroupIds' => array($webServerGroupId),
          ]);

dpm($describeSecurityGroups->toArray());

$webServerOwnerId = $describeSecurityGroups->toArray()['SecurityGroups'][0]['OwnerId'];


#---- WebServer security group ingress---
#-- rule 1: SSH(22)
$result = $ec2->authorizeSecurityGroupIngress([
          'GroupId' => $webServerGroupId,
          'IpProtocol' => 'tcp',
          'FromPort' => 22,
          'ToPort' => 22,
          'CidrIp' => '0.0.0.0/0'
        ]);

#-- rule 2: HTTP(80)
$result = $ec2->authorizeSecurityGroupIngress([
          'GroupId' => $webServerGroupId,
          'IpProtocol' => 'tcp',
          'FromPort' => 80,
          'ToPort' => 80,
          'CidrIp' => '0.0.0.0/0'
        ]);

#-- rule 3: HTTPS(443)
$result = $ec2->authorizeSecurityGroupIngress([
          'GroupId' => $webServerGroupId,
          'IpProtocol' => 'tcp',
          'FromPort' => 443,
          'ToPort' => 443,
          'CidrIp' => '0.0.0.0/0'
        ]);

#-- rule 4: PostgreSQL(5432)
$result = $ec2->authorizeSecurityGroupIngress([
          'GroupId' => $webServerGroupId,
          'IpProtocol' => 'tcp',
          'FromPort' => 5432,
          'ToPort' => 5432,
          'CidrIp' => '0.0.0.0/0'
        ]);

#-- rule 5: MySQL/Aurora(3306)
$result = $ec2->authorizeSecurityGroupIngress([
          'GroupId' => $webServerGroupId,
          'IpProtocol' => 'tcp',
          'FromPort' => 3306,
          'ToPort' => 3306,
          'CidrIp' => '0.0.0.0/0'
        ]);

dpm($result->toArray());

$security_group_databaseServer = $ec2->createSecurityGroup([
          'Description' => 'Security group for database server',
          'GroupName' => 'databaseServer_security_group',
          'VpcId' => $VpcId,
          ]);
#dpm($security_group_databaseServer->toArray());
$databaseServerGroupId = $security_group_databaseServer->toArray()['GroupId'];

          #---- databaseServer security group ingress---

 */


/*
## Delete security groups
$deleteWebServerSecurityGroup = $ec2->deleteSecurityGroup([
          'GroupId' => $webServerGroupId,
        ]);

$deleteDatabaseServerSecurityGroup = $ec2->deleteSecurityGroup([
          'GroupId' => $databaseServerGroupId,
        ]);

## Delete Subnet
$deleteSubnet_public_1 = $ec2->deleteSubnet([
          'SubnetId' => $SubnetId_public_1 
        ]);

## Delete VPC
$result = $ec2->deleteVpc([
          'VpcId' => $VpcId,
        ]);



## Describe Security groups
$describeSecurityGroups = $ec2->describeSecurityGroups([
          'GroupIds' => ['sg-efe02495'],
          ]);
dpm($describeSecurityGroups->toArray());
 */
